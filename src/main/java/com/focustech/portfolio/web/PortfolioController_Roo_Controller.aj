// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.focustech.portfolio.web;

import com.focustech.portfolio.domain.Portfolio;
import com.focustech.portfolio.service.PortfolioService;
import com.focustech.portfolio.web.PortfolioController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PortfolioController_Roo_Controller {
    
    @Autowired
    PortfolioService PortfolioController.portfolioService;
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PortfolioController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Portfolio());
        return "portfolios/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PortfolioController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("portfolio", portfolioService.findPortfolio(id));
        uiModel.addAttribute("itemId", id);
        return "portfolios/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PortfolioController.update(@Valid Portfolio portfolio, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, portfolio);
            return "portfolios/update";
        }
        uiModel.asMap().clear();
        portfolioService.updatePortfolio(portfolio);
        return "redirect:/portfolios/" + encodeUrlPathSegment(portfolio.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PortfolioController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, portfolioService.findPortfolio(id));
        return "portfolios/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PortfolioController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Portfolio portfolio = portfolioService.findPortfolio(id);
        portfolioService.deletePortfolio(portfolio);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/portfolios";
    }
    
    void PortfolioController.populateEditForm(Model uiModel, Portfolio portfolio) {
        uiModel.addAttribute("portfolio", portfolio);
    }
    
    String PortfolioController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
